{"title":"Introduccion a Google Earth Engine","markdown":{"yaml":{"title":"Introduccion a Google Earth Engine","author":"J. Miguel Salazar","date":"2024-02-22","categories":["news","course","GEE"],"image":"Consola_GEE.png","execute":{"enabled":false}},"headingText":"Bienvenidos","containsRefs":false,"markdown":"\n\n\n\nEste blog lo utilizaremos como plataforma para poder hacer un curso de [Google Earth Engine](https://earthengine.google.com/) y este es el primer post de dicho blog. \n\n\n## Introducción\n\nGoogle earth engine (GEE) es una servicio de procesamiento geoespacial en linea el cual tiene la capacidad de hacer procesamientos a gran escala. Esto nos ayuda a procesar grandes cantidades de datos geoespaciales (que muchos se encuentran dentro de GEE).  \n\n\nGEE nos permite usar catalogos públicos de imágenes satelitales y generar servicios interactivos (mapas). \n\n\nGEE esta pensado para su uso usando el sitio  [https://code.earthengine.google.com/](https://code.earthengine.google.com/), para poder hacer uso del mismo es necesario darse de alta en el servicio a traves de una cuente de Google. \n\n\n\n## Entendiendo GEE\n\nVamos a utilizar como principal herramienta el editor de código de GEE. \n\n![Consola de GEE](Consola_GEE.png)\n\nDentro de esta consola se tiene las siguientes partes \n\n* Code Editor: dentro de esta area se desarrolla el código en GEE usando JavaScript  \n\n![Editor código GEE](GEE_text_editor.png)\n\n* Console: Muestra la salidas que se piden dentro del código ejecutado. Si hay errores en el código ejecutado en esta sección se mostrarán los mensajes de error corespondientes.\n\n![Consola GEE](GEE_console.png)\n\n* Inspector: En esta parte se pueden inspeccionar los elementops dentro de los mapas generados. \n\n![Inspector de elementos de  GEE](GEE_Inspector.png)\n\n* Task: El manejador de tareas nos sirve para monitoriar las distintas tareas solicitadas dentro de GEE como puede ser la descarga o subida de imágenes. \n\n![Manejador de tareas GEE](GEE_Task_manager.png)\n\n* Scripts Esta parte funciona como un navegador de archivos para los scripts propios y otros a los cuales se tiene acceso como pueden ser los compartidos por otros usuarios.\n\n![Navegador Scripts ](GEE_scripts.png)\n\n* Docs: Aquí podemos encontrar muchos ejemplos distintos de como se utiliza GEE,    lo cuales son compartidos por los desarrolladores de la plataforma. \n![Ejemplos de scripts en GEE](GEE_docs.png)\n\n* Assets: En esta sección se encuentran objetos que fueron subidos por el usuario para ayudar en la generación de mapas. Los distintos objetos pueden ser imágenes rasters u objetos geométricos lo cualess pueden estar dentro de un archivo '.shp'. \n![Activos disponibles para su uso en GEE](GEE_assets.png)\n\n \n\n## Entendiendo un poco más\n\nEl lenguaje de uso nativo de GEE es JavaScript, aunque se ha desarrollado una API (Application Programming Interface) para python esta también hace uso de scripts escritos en JavaScript.  Vamos a explicar los básicos en JavaScript y a partir de éstos se puede hacer una transición hacia códigos en Python de forma más sencilla. \n\n\nAunque se hace uso de JavaScript este no es un curso de JavaScript por tal motivo vamos a explicar las cosas necesarias para hacer cosas dentro de GEE.\n\n## Hola mundo\n\nComo es regular en los lenguajes de programación vamos hacer un script para imprimir hola mundo. \n\n\nDentro de la sección de editor de código escribimos lo siguiente:\n\n```JavaScript\nprint('Hola Mundo')\n```\npara hacer la ejecución de todo nuestro script se oprime el boton 'Run'\n\n![Ejecutar el código RUN](run.png)\n\n\nEn sección de la consola aparece la leyenda 'Hola Mundo'. Lo primero que podemos observar es el uso de la función 'print()'  nos permite imrpimir cadenas de caracteres. Esta función también nos permite imprimir distintos de estructuras de datos como son los metadatos de imágenes satelitáles o bien datos especificos como valores numéricos. \n\n\nEn JavaScripts en GEE tenemos distintos tipos de estructuras de datos como 'Image', 'Feature', 'Dictionary', 'List', 'Array', 'Date', 'Number' y 'String'. En GEE las principales estructuras son 'Image' y 'Feature', la estructura ['Image'](https://developers.google.com/earth-engine/apidocs/ee-image) es la estructura en donde se almacenan las imagenes, la imágenes pueden tener distintas bandas, como son la mayoría de las imágenes raster satelitales. La estructura ['Feature'](https://developers.google.com/earth-engine/apidocs/ee-feature) en GEE en el fondo es un GeoJSON, el cual es un objeto que debe de tener una propiedad 'Geometry', aunque esta puede ser 'Null', el uso común de la estructura 'Feature' nos sirve para asociar una propiedad a los objetos geométricos.\n\n\nAhora vamos a obtener cosas en un mapa, en el editor de código se escribe el siguiente script. \n\n```JavaScript\nvar paises = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017');\n//print(paises)\nvar filtromexico  = ee.Filter.eq('country_na', 'Mexico');\nvar paismexico = paises.filter(filtromexico)\n//print(paismexico)\nMap.addLayer(paismexico);\nMap.centerObject(paismexico, 4);\n//Map.setCenter(-99.221440, 19.291990,  4);\n```\n\nGEE nos permite tener acceso a un extenso [conjunto de datos](https://developers.google.com/earth-engine/datasets) en este caso vamos a utilizar la colección de datos 'USDOS/LSIB_SIMPLE/2017' la cual son los polígonos a gran escala de los paises de acuerdo al [departamento de estado de EUA](https://geonode.state.gov/layers/catalog:geonode:LSIB). [`ee.FeatureCollection`](https://developers.google.com/earth-engine/apidocs/ee-filter) es una estructura de datos que nos permite hacer el manejo de colecciones de `ee.Features` ('Features') de igual forma existe la estructura de datos 'ee.ImageCollection'. \n\nLo primero que vemos dentro del código es la forma para declarar variables dentro de JavaScript este usa la palabra `var` para decir que lo siguiente sera una variable. En la variable `paises` se encuentra la colleccion de los políogonos de paises. Al ser una coleccion vamos a quedarnos sólo con el país Mexico. En la variable filtromexico contiene un filtro el cual filtrara usando el campo 'country_na' a los elementos que cuyo campo tengan la cadena 'Mexico'. \n\nEn la variable `paismexico` tenemos el resultado de aaplicar el filtro 'filtromexico' en la colección paises. \n\nLas siguentes dos lineas en el código añaden al mapa el polígono que se encuentra en la variable `paismexico` y pone el mapa centrado en la variable con un zoom de 4.\n\nEn el código podemos observar la forma de evitar que se ejecuten ciertas lineas de código `//` nos sirve para hacer comentarios para poder explicar el código o bien para evitar que se ejecuten ciertas lineas. Esto es de particular relevancia cuando estamos experimentando o haciendo la limpieza del código. \n\n\n  \n\n\n\n\n\n```JavaScript\nvar worldcountries = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017');\n//print(worldcountries)\nvar filterCountry = ee.Filter.eq('country_na', 'Mexico');\n//var filterCountry = ee.Filter.inList('country_na', ['Mexico', 'Guatemala']);\nvar country = worldcountries.filter(filterCountry);\n//print(country.geometry())\nMap.addLayer(country);\nMap.centerObject(country, 4);\n    //Map.setCenter(-99.221440, 19.291990,  4);\n\nvar collection  = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_NO2')\n  .select('NO2_column_number_density');\nprint(collection.first())\n\nvar filter18 = ee.Filter.date('2018-10-01', '2018-10-02');\nvar filter19 = ee.Filter.date('2019-10-01', '2019-10-02');\n\nvar no2_18  = collection.filter(filter18).mean().multiply(1e6).clip(country);\nvar no2_19 = collection.filter(filter19).mean().multiply(1e6).clip(country);\n\nprint('imagen 2018:',  no2_18);\nprint('imagen 2019:',  no2_19);\nvar vizParams = {\n  min: 0,\n  max: 200,\n  palette: ['black', 'purple', 'green', 'red']\n};\n\n\n/*\nMap.addLayer(no2_18, vizParams, 'no2_18');\nMap.addLayer(no2_19, vizParams, 'no2_19');\n*/\n\n//Split\n\nMap.addLayer(no2_18, vizParams, 'parte1');\n\nvar Map2 = ui.Map();\nMap2.addLayer(no2_19, vizParams, 'parte2');\n\nvar linker = ui.Map.Linker([ui.root.widgets().get(0), Map2]);\n\nvar splitPanel = ui.SplitPanel({\n  firstPanel: linker.get(0),\n  secondPanel: linker.get(1),\n  orientation: 'horizontal',\n  wipe: true,\n  style: {stretch: 'both'}\n});\n// Set the SplitPanel as the only thing in root\nui.root.widgets().reset([splitPanel]);\n// Center the SplitPanel on coordinates (10, 44) and set zoom level to 6\n//Map.setCenter(-99.221440, 19.291990,  4);\nlinker.get(0).setCenter(-99.221440, 19.291990, 6);\n```\n\n\n\n\n\n\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.179","theme":"cosmo","title-block-banner":true,"title":"Introduccion a Google Earth Engine","author":"J. Miguel Salazar","date":"2024-02-22","categories":["news","course","GEE"],"image":"Consola_GEE.png"},"extensions":{"book":{"multiFile":true}}}}}