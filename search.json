[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/Introduccion/index.html",
    "href": "posts/Introduccion/index.html",
    "title": "Introducción a Google Earth Engine",
    "section": "",
    "text": "Este blog lo utilizaremos como plataforma para poder hacer un curso de Google Earth Engine y este es el primer post de dicho blog.\n\n\nGoogle earth engine (GEE) es una servicio de procesamiento geoespacial en linea el cual tiene la capacidad de hacer procesamientos a gran escala. Esto nos ayuda a procesar grandes cantidades de datos geoespaciales (que muchos se encuentran dentro de GEE).\nGEE nos permite usar catalogos públicos de imágenes satelitales y generar servicios interactivos (mapas).\nGEE esta pensado para su uso usando el sitio https://code.earthengine.google.com/, para poder hacer uso del mismo es necesario darse de alta en el servicio a traves de una cuente de Google.\n\n\n\nVamos a utilizar como principal herramienta el editor de código de GEE.\n\n\n\nConsola de GEE\n\n\nDentro de esta consola se tiene las siguientes partes\n\nCode Editor: dentro de esta area se desarrolla el código en GEE usando JavaScript\n\n\n\n\nEditor código GEE\n\n\n\nConsole: Muestra la salidas que se piden dentro del código ejecutado. Si hay errores en el código ejecutado en esta sección se mostrarán los mensajes de error corespondientes.\n\n\n\n\nConsola GEE\n\n\n\nInspector: En esta parte se pueden inspeccionar los elementops dentro de los mapas generados.\n\n\n\n\nInspector de elementos de GEE\n\n\n\nTask: El manejador de tareas nos sirve para monitoriar las distintas tareas solicitadas dentro de GEE como puede ser la descarga o subida de imágenes.\n\n\n\n\nManejador de tareas GEE\n\n\n\nScripts Esta parte funciona como un navegador de archivos para los scripts propios y otros a los cuales se tiene acceso como pueden ser los compartidos por otros usuarios.\n\n\n\n\nNavegador Scripts\n\n\n\nDocs: Aquí podemos encontrar muchos ejemplos distintos de como se utiliza GEE, lo cuales son compartidos por los desarrolladores de la plataforma. \nAssets: En esta sección se encuentran objetos que fueron subidos por el usuario para ayudar en la generación de mapas. Los distintos objetos pueden ser imágenes rasters u objetos geométricos lo cualess pueden estar dentro de un archivo ‘.shp’. \n\n\n\n\nEl lenguaje de uso nativo de GEE es JavaScript, aunque se ha desarrollado una API (Application Programming Interface) para python esta también hace uso de scripts escritos en JavaScript. Vamos a explicar los básicos en JavaScript y a partir de éstos se puede hacer una transición hacia códigos en Python de forma más sencilla.\nAunque se hace uso de JavaScript este no es un curso de JavaScript por tal motivo vamos a explicar las cosas necesarias para hacer cosas dentro de GEE.\n\n\n\nComo es regular en los lenguajes de programación vamos hacer un script para imprimir hola mundo.\nDentro de la sección de editor de código escribimos lo siguiente:\nprint('Hola Mundo')\npara hacer la ejecución de todo nuestro script se oprime el boton ‘Run’\n\n\n\nEjecutar el código RUN\n\n\nEn sección de la consola aparece la leyenda ‘Hola Mundo’. Lo primero que podemos observar es el uso de la función ‘print()’ nos permite imrpimir cadenas de caracteres. Esta función también nos permite imprimir distintos de estructuras de datos como son los metadatos de imágenes satelitáles o bien datos especificos como valores numéricos.\nEn JavaScripts en GEE tenemos distintos tipos de estructuras de datos como ‘Image’, ‘Feature’, ‘Dictionary’, ‘List’, ‘Array’, ‘Date’, ‘Number’ y ‘String’. En GEE las principales estructuras son ‘Image’ y ‘Feature’, la estructura ‘Image’ es la estructura en donde se almacenan las imagenes, la imágenes pueden tener distintas bandas, como son la mayoría de las imágenes raster satelitales. La estructura ‘Feature’ en GEE en el fondo es un GeoJSON, el cual es un objeto que debe de tener una propiedad ‘Geometry’, aunque esta puede ser ‘Null’, el uso común de la estructura ‘Feature’ nos sirve para asociar una propiedad a los objetos geométricos.\nAhora vamos a obtener cosas en un mapa, en el editor de código se escribe el siguiente script.\nvar paises = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017');\n//print(paises)\nvar filtromexico  = ee.Filter.eq('country_na', 'Mexico');\nvar paismexico = paises.filter(filtromexico)\n//print(paismexico)\nMap.addLayer(paismexico);\nMap.centerObject(paismexico, 4);\n//Map.setCenter(-99.221440, 19.291990,  4);\nGEE nos permite tener acceso a un extenso conjunto de datos en este caso vamos a utilizar la colección de datos ‘USDOS/LSIB_SIMPLE/2017’ la cual son los polígonos a gran escala de los paises de acuerdo al departamento de estado de EUA. ee.FeatureCollection es una estructura de datos que nos permite hacer el manejo de colecciones de ee.Features (‘Features’) de igual forma existe la estructura de datos ‘ee.ImageCollection’.\nLo primero que vemos dentro del código es la forma para declarar variables dentro de JavaScript este usa la palabra var para decir que lo siguiente sera una variable. En la variable paises se encuentra la colleccion de los políogonos de paises. Al ser una coleccion vamos a quedarnos sólo con el país Mexico. En la variable filtromexico contiene un filtro el cual filtrara usando el campo ‘country_na’ a los elementos que cuyo campo tengan la cadena ‘Mexico’.\nEn la variable paismexico tenemos el resultado de aplicar el filtro ‘filtromexico’ en la colección paises.\nLas siguentes dos lineas en el código añaden al mapa el polígono que se encuentra en la variable paismexico y pone el mapa centrado en la variable con un zoom de 4.\nEn el código podemos observar la forma de evitar que se ejecuten ciertas lineas de código // nos sirve para hacer comentarios para poder explicar el código o bien para evitar que se ejecuten ciertas lineas. Esto es de particular relevancia cuando estamos experimentando o haciendo la limpieza del código.\nPodemos ejecutar el código que acabamos de crear presionando el boton ‘run’, una vez ejecutado podemos ver en el mapa de México\n\n\n\nMostramos México\n\n\nVamos a añadir algunas lineas más de código\nvar worldcountries = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017');\n//print(worldcountries)\nvar filterCountry = ee.Filter.eq('country_na', 'Mexico');\n//var filterCountry = ee.Filter.inList('country_na', ['Mexico', 'Guatemala']);\nvar country = worldcountries.filter(filterCountry);\n\nMap.addLayer(country, {color: 'yellow'}, 'Paises');\nMap.centerObject(country, 4);\n\n\nvar collection  = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_NO2')\n  .select('NO2_column_number_density');\n//print(collection.first())\n\n/// FILTROS PARA SELECIONAR LAS IMAGENES QUE SE DESEAN \n\n\nvar filter19 = ee.Filter.date('2019-10-01', '2019-10-02');\n\n\nvar no2_19 = collection.filter(filter19).mean().multiply(1e6).clip(country);\n\n//print('imagen 2019:',  no2_19);\nvar vizParams = {\n  min: 0,\n  max: 200,\n  palette: ['black', 'purple', 'green', 'red']\n};\n\n\nMap.addLayer(no2_19, vizParams, 'no2_19');\nOtro de los objetos importantes dentro de GEE son las colecciones de imágenes, en una collección de se encuentran las imágenes en donde todas comparten ciertas propiedades comunes como son su sistema de referencia, el algoritmo con el que se hizo, etc.\nTomar la colección de imagenes completa en general no es necesario, por lo general o se selecciona una o se obtiene sus agregados dependiendo de la banda. Las imágenes satelitales en general contienen muchas bandas de los distintos sensores o imágenes generadas a través de algoritmos usando los datos de sensores satelitales. Como no es necesario hacer uso de todas las bandas, ni todas las imágenes es necesario tener la capacidad de seleccionar lo que consideremos de nuestro interes. En GEE existen objetos que nos ayudan a seleccionar, estos objetos son los filtros [ee.Filter] (https://developers.google.com/earth-engine/apidocs/ee-filter), estos filtros pueden filtrar campos en especifico.\nEn la siguiente linea se hace un objeto de tipo ee.Filter que filtra las imágenes de la coleccion de imágenes usando las fechas, en las siguentes lineas de código en la variable no2_19 se almacenan los resultados de usar el filtro filter19 y obtener el promedio de todas las imágenes, se multiplica por el escalar \\(1\\times10^6\\) y se toman solo el area que concide con el poligono en la variable country. Sólo para entender se imprime en la consola y observar que lo que obtenemos es realmente una imagen.\nPara poder hacer una visualización de las imágenes, es necesario dar un conjunto de parámetros al objeto donde esta nuestro mapa Map. En el caso anterior donde se muestra el polígono en el mapa no se añade ningún color, pero en este caso se cambio a amarillo y se añade el nombre de la capa. Para hacer la visualización de la imagenen es necesario conocer sus valores máximos y mínimos, adicionammente se le da un conjunto de colores para colorear la imagen, estos colores nos muestren una diferencia entre los valores de la imagen y al usar el color amarillo de fondo se observa con mayor claridad los lugares donde la imagen no tiene datos.\nEl resultado lo vamos a poder ver en el mapa\n\n\n\n\\(NO_2\\) en la republica mexicana en un día"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/NVDI/index.html",
    "href": "posts/NVDI/index.html",
    "title": "NDVI",
    "section": "",
    "text": "Para obtener el NDVI se debe aplicar la siguiente función\n\\[\nNDVI = \\frac{NIR - rojo}{NIR +  rojo}\n\\]\ndonde \\(NIR\\) es la banda que corresponde a la frecuencia cercana al infra rojo (Near-infrared) y rojo es la banda correspondiente a la frecuencia que corresponde al color rojo.\nVamos a concentrarnos en las imágenes que toquen a mexico por tal motivo tomamos el polígono de México como lo hicimos en la introducción a GEE\nvar worldcountries = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017');\nvar country = worldcountries.filter(ee.Filter.eq('country_na', 'Mexico'));\nEn este caso vamos a tomar la colección COPERNICUS/S2_SR en general en el catalogo de GEE en la sección de cada colección podemos ver una descripción general, un pequeño ejemplo y las bandas de cada imagen.\nEn las siguientes lineas de código se selecciona la colección y se filtra a las imágenes que toquen al polygono que esta en la variable country y se filtra en un rango de fechas.\nvar S2_SR = ee.ImageCollection('COPERNICUS/S2_SR')\n  .filterBounds(country)\n  .filterDate('2018-01-01', '2019-01-01');\nPara obtener el NDVI vamos a usar las bandas B4 y B8\nvar nirBand = 'B8';\nvar redBand = 'B4';\nVamos a tomar la primera imagen de la collección de imágenes, para hacer esto el objeto ImageCollection tiene una función llamada first. Se calcula el NDVI para dicha imagen como prueba se guarda eu una variable, podemos observar que en la imagen ndvi_fitenemos una nueva banda la cual no se encuentra en la primera imagen de la collección.\nprint(S2_SR.first());\nvar ndvi_fi = S2_SR.first().normalizedDifference([nirBand, redBand]).rename('NVDI');\nprint(ndvi_fi);\nVamos a visualizar lo que tenemos hasta ahora\nvar NDVIpalette = ['FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163',\n'99B718', '74A901', '66A000', '529400', '3E8601', '207401', '056201',\n'004C00', '023B01', '012E01', '011D01', '011301'];\nMap.addLayer(country);\nMap.addLayer(ndvi_fi, {palette: NDVIpalette}, 'NVDI de Sentinel');\nComo podemos ver en la imagen Figure 1 tenemos una pequeña parte del territorio con el calculo de NDVI, esto es debido a que la primera imagen de la colleccion no cubre todo el territorio de la Republica Mexicana, por tal motivo es necesario obtener el NDVI a todo el conjunto de imágenes en la collección.\n\n\n\nFigure 1: NDVI una parte de México\n\n\nPara hacer esto lo que se tiene que hacer es aher lo mismo para todas las imágenes dentro de la colección. En GEE lo hacemos mediante funciones, las funciones deben de tener como parámetro los elementos de la colección ya sea de Feature o de Image y hacer lo necesario dentro de la función. En este caso a cada imagen utiliza la función normalizeDifference a las bandas B4 y B8 función y aplicar esta función a cada elemento de la colección\nPara declarar la función se hace usando la siguiente estructura\nvar nombre = function(parametro){\n  ///Cuerpo de la función \n\n  var parametro_interno = 5\n  return parametro + parametro_interno \n\n}\nUsando la estructura anterior se adapta para nuestro objetivo, y se regresa la imagen con la nueva banda calculada.\nvar addNDVI = function(image) {\n  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI');\n  return image.addBands(ndvi);\n};\nEn la variable addNDVIse encuentra la función ahora vamos aplicar la función a los elementos de la colección.\nvar S2_NDVI = S2_SR.map(addNDVI);\nY usando los mismos parámetros de visualización desplegamos las imagenes en nuestro mapa\nvar S2_NDVI = S2_SR.map(addNDVI);\nMap.addLayer(S2_NDVI.select('NDVI'), {palette: NDVIpalette}, 'NVDI de Sentinel');\nY el resultado lo podemos ver en la imagen\n\n\n\nNDVI Republica mMxicana\n\n\nSe tiene que hacer que se vea bien\n\nEsta borroso\nMostrar sólo el pais.\n\nvar worldcountries = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017');\n\nvar country = worldcountries.filter(ee.Filter.eq('country_na', 'Mexico'));\nvar S2_SR = ee.ImageCollection('COPERNICUS/S2_SR')\n  .filterBounds(country)\n  .filterDate('2018-01-01', '2019-01-01');\n\nvar nirBand = 'B8';\nvar redBand = 'B4';\n\nprint(S2_SR.first());\nvar ndvi_fi = S2_SR.first().normalizedDifference([nirBand, redBand]).rename('NVDI');\n\n\nprint(ndvi_fi);\n\n\n\nvar NDVIpalette = ['FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163',\n'99B718', '74A901', '66A000', '529400', '3E8601', '207401', '056201',\n'004C00', '023B01', '012E01', '011D01', '011301'];\nMap.addLayer(country);\n//Map.addLayer(ndvi_fi, {palette: NDVIpalette}, 'NVDI de Sentinel');\n\nvar addNDVI = function(image) {\n  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI');\n  return image.addBands(ndvi);\n};\n///////\n\nvar S2_NDVI = S2_SR.map(addNDVI);\nMap.addLayer(S2_NDVI.select('NDVI'), {palette: NDVIpalette}, 'NVDI de Sentinel');"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GEE_intento",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 22, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nIntroducción a Google Earth Engine\n\n\n\n\n\n\n\nnews\n\n\ncourse\n\n\nGEE\n\n\n\n\n\n\n\n\n\n\n\nFeb 22, 2024\n\n\nJ. Miguel Salazar\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nFeb 19, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\n  \n\n\n\n\nNDVI\n\n\n\n\n\n\n\nnews\n\n\ncourse\n\n\nGEE\n\n\n\n\n\n\n\n\n\n\n\nFeb 4, 2024\n\n\nJ. Miguel Salazar\n\n\n\n\n\n\nNo matching items"
  }
]